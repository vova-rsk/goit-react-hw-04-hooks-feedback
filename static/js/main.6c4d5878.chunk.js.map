{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.styled.jsx","App.jsx","index.js"],"names":["Section","title","children","Button","styled","button","FeedbackOptions","options","onLeaveFeedback","map","item","type","onClick","List","ul","Statistics","props","statsItems","Object","keys","idx","arr","toUpperCase","slice","value","length","join","Notification","message","Container","div","FEEDBACK_OPTIONS","feedbackReducer","state","action","playload","App","useReducer","reduce","acc","option","dispatch","totalFeedbacks","values","elem","positivePercentage","Math","round","e","target","dataset","name","total","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAWeA,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,M,cCJDC,EAASC,IAAOC,OAAV,8dCSGC,EARS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAI,OACrB,cAACP,EAAD,CAAmBQ,KAAK,SAAS,YAAWD,EAAME,QAASJ,EAA3D,SACGE,GADUA,OCHXG,EAAOT,IAAOU,GAAV,8LCoBKC,EAnBI,SAAAC,GACjB,IAAMC,EAAaC,OAAOC,KAAKH,GAC/B,OACE,cAACH,EAAD,UACGI,EAAWR,KAAI,SAACC,EAAMU,EAAKC,GAC1B,IAAMpB,EAAQS,EAAK,GAAGY,cAAgBZ,EAAKa,MAAM,GAC3CC,EAAQ,CAACR,EAAMN,GAAOU,IAAQC,EAAII,OAAS,EAAI,GAAK,KAAKC,KAAK,IAEpE,OACE,+BACE,iCAAOzB,EAAP,OACA,+BAAOuB,MAFAJ,SCNJO,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCDPC,EAAYzB,IAAO0B,IAAV,8CCKTC,EAAmB,CAAC,OAAQ,UAAW,MAAO,YAAa,aAG3DC,EAAkB,SAACC,EAAOC,GAC9B,OAAO,2BAAKD,GAAZ,kBAAoBC,EAAOvB,KAAOsB,EAAMC,EAAOvB,MAAQuB,EAAOC,YA+CjDC,EAxCH,WACV,MAA0BC,qBAAWL,EAAiB,IAAI,kBACxDD,EAAiBO,QAAO,SAACC,EAAKC,GAAN,mBAAC,eAAsBD,GAAvB,kBAA6BC,EAAS,MAAM,OADtE,mBAAOP,EAAP,KAAcQ,EAAd,KAIMlC,EAAUW,OAAOC,KAAKc,GACtBS,EAAiBxB,OAAOyB,OAAOV,GAAOK,QAC1C,SAACC,EAAKK,GAAN,OAAeL,EAAMK,IACrB,GAEIC,EAAsBZ,EAAK,KAE7Ba,KAAKC,MAAOd,EAAK,KAAkBS,EAAkB,KADrD,EASJ,OACE,eAACb,EAAD,WACE,cAAC,EAAD,CAAS5B,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBM,QAASA,EAASC,gBARlB,SAAAwC,GACrB,IAAMR,EAASQ,EAAEC,OAAOC,QAAQC,KAChCV,EAAS,CAAE9B,KAAM6B,EAAQL,SAAU,SAQhCO,EACC,cAAC,EAAD,CAASzC,MAAM,aAAf,SACE,cAAC,EAAD,2BACMgC,GADN,IAEEmB,MAAOV,EACPG,mBAAoBA,OAIxB,cAAC,EAAD,CAAcjB,QAAQ,0BC/C9ByB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6c4d5878.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  );\n};\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import styled from '@emotion/styled';\n\nconst Button = styled.button`\n  margin-left: 10px;\n  padding: 2px 6px;\n  border: none;\n  border-radius: 5px;\n  border: 0.2px solid #dedddd;\n  cursor: pointer;\n  transition: box-shadow 250ms linear;\n\n  &:hover {\n    -webkit-box-shadow: 0px 1px 5px 1px rgba(34, 60, 80, 0.92);\n    -moz-box-shadow: 0px 1px 5px 1px rgba(34, 60, 80, 0.92);\n    box-shadow: 0px 1px 5px 1px rgba(34, 60, 80, 0.92);\n  }\n\n  &:active {\n    color: #fff;\n    background-color: #3a6edd;\n  }\n`;\n\nexport { Button };\n","import PropTypes from 'prop-types';\nimport { Button } from './FeedbackOptions.styled';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(item => (\n    <Button key={item} type=\"button\" data-name={item} onClick={onLeaveFeedback}>\n      {item}\n    </Button>\n  ));\n};\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nconst List = styled.ul`\n  margin: 0;\n  padding: 0;\n  font-weight: 500;\n  list-style: none;\n\n  li {\n    margin-bottom: 4px;\n  }\n\n  span:last-child {\n    margin-left: 8px;\n  }\n`;\n\nexport { List };\n","import PropTypes from 'prop-types';\nimport { List } from './Statistics.styled';\n\nconst Statistics = props => {\n  const statsItems = Object.keys(props);\n  return (\n    <List>\n      {statsItems.map((item, idx, arr) => {\n        const title = item[0].toUpperCase() + item.slice(1);\n        const value = [props[item], idx !== arr.length - 1 ? '' : '%'].join('');\n\n        return (\n          <li key={idx}>\n            <span>{title}:</span>\n            <span>{value}</span>\n          </li>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  props: PropTypes.objectOf(PropTypes.number),\n};\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nconst Container = styled.div`\n  padding: 10px;\n`;\n\nexport { Container };\n","import { useReducer } from 'react';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\nimport { Container } from './App.styled';\n\nconst FEEDBACK_OPTIONS = ['good', 'neutral', 'bad', 'smthElse1', 'smthElse2'];\nconst TARGET_OPTION = 'good';\n\nconst feedbackReducer = (state, action) => {\n  return { ...state, [action.type]: state[action.type] + action.playload };\n};\n\n/*\n *  The functioning of the component is based on the specified feedback-options array and\n *  the target element from the specified array, for which statistics will be calculated\n */\nconst App = () => {\n  const [state, dispatch] = useReducer(feedbackReducer, {}, () =>\n    FEEDBACK_OPTIONS.reduce((acc, option) => ({ ...acc, [option]: 0 }), {}),\n  );\n\n  const options = Object.keys(state);\n  const totalFeedbacks = Object.values(state).reduce(\n    (acc, elem) => acc + elem,\n    0,\n  );\n  const positivePercentage = !state[TARGET_OPTION]\n    ? 0\n    : Math.round((state[TARGET_OPTION] / totalFeedbacks) * 100);\n\n  /*function for adding current feedback*/\n  const incrementStats = e => {\n    const option = e.target.dataset.name;\n    dispatch({ type: option, playload: 1 });\n  };\n\n  return (\n    <Container>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={options} onLeaveFeedback={incrementStats} />\n      </Section>\n      {totalFeedbacks ? (\n        <Section title=\"Statistics\">\n          <Statistics\n            {...state}\n            total={totalFeedbacks}\n            positivePercentage={positivePercentage}\n          />\n        </Section>\n      ) : (\n        <Notification message=\"No feedback given\" />\n      )}\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}